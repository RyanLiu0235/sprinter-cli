#!/usr/bin/env node

const path = require('path')
const fs = require('fs')
const fse = require('fs-extra')
const program = require('commander')
const ora = require('ora')
const download = require('download-git-repo')
const userHome = require('user-home')
const chalk = require('chalk')

program
  .usage('<template-name> [project-name]')
  .option('--local', 'use cached templates')
  .parse(process.argv)

const args = program.args
const template = args[0]
const project = args[1]
const dest = path.resolve(process.cwd(), project)
const cacheDir = path.resolve(userHome, '.sprinter-templates', template)

// paddings
console.log()
process.on('exit', () => { console.log() })

run()

async function run() {
  const spinner = ora('Downloading files...')
  spinner.start()
  if (program.local) {
    // use cached templates
    await useCachedTemplates(cacheDir, dest)
  } else {
    await downloadTemplate(template, dest)
  }
  spinner.stop()
  console.log('Project has been initiated successfully!')
  console.log()
  console.log(chalk.green(`    $ cd ${project} && npm install`))
  console.log(chalk.green('    $ npm run tdd'))
}

function useCachedTemplates(dir, dest) {
  return new Promise((resolve, reject) => {
    fs.access(dir, async function(err) {
      if (err) {
        // if local cache is not available,
        // download from github repository
        await downloadTemplate(template)
      } else {
        await fse.copy(dir, dest)
      }
      resolve()
    })
  })
}

function downloadTemplate(template, dest) {
  return new Promise((resolve, reject) => {
    download(`sprinter-templates/${template}`, dest, err => {
      if (err) {
        reject(err)
        return
      }
      // cache template
      fs.access(cacheDir, async function(err) {
        if (err) {
          await fse.remove(cacheDir)
        }
        fse.copy(dest, cacheDir)
        resolve()
      })
    })
  })
}
